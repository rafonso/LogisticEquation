/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Logistic1.java
 *
 * Created on 20/04/2010, 20:52:43
 */
package logisticequation.ui;

import java.awt.Color;
import java.util.Iterator;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.jdesktop.swingx.JXGraph;

/**
 *
 * @author rafael
 */
public class Logistic1 extends javax.swing.JFrame implements ChangeListener {

    /** Creates new form Logistic1 */
    public Logistic1() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        graph = new logisticequation.ui.JXGraph1();
        slspK = new logisticequation.ui.components.SliderSpinner();
        pnlX0Iteracoes = new javax.swing.JPanel();
        slspX0 = new logisticequation.ui.components.SliderSpinner();
        slspIteracoes = new logisticequation.ui.components.SliderSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.BorderLayout(5, 5));

        graph.setFocusable(false);
        graph.setMajorX(0.1);
        graph.setMajorY(0.1);
        graph.setView(new java.awt.geom.Rectangle2D.Double(-0.0, -0.1, 1.1, 1.1));

        org.jdesktop.layout.GroupLayout graphLayout = new org.jdesktop.layout.GroupLayout(graph);
        graph.setLayout(graphLayout);
        graphLayout.setHorizontalGroup(
            graphLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 413, Short.MAX_VALUE)
        );
        graphLayout.setVerticalGroup(
            graphLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 296, Short.MAX_VALUE)
        );

        getContentPane().add(graph, java.awt.BorderLayout.CENTER);
        graph.addPlots(Color.RED, this.parabolaPlot);
        graph.addPlots(Color.BLUE, new LinePlot());

        slspK.setStep(0.01);
        slspK.setExtendedStep(0.10);
        slspK.setMaximum(4.00);
        slspK.setMinimum(0.00);
        slspK.setOrientation(logisticequation.ui.components.SliderSpinner.Orientation.VERTICAL);
        slspK.setPattern("0.00");
        slspK.setTitulo("K");
        slspK.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                slspKPropertyChange(evt);
            }
        });
        getContentPane().add(slspK, java.awt.BorderLayout.EAST);

        pnlX0Iteracoes.setLayout(new java.awt.GridLayout(2, 1, 5, 5));

        slspX0.setStep(0.01);
        slspX0.setExtendedStep(0.10);
        slspX0.setMaximum(1.00);
        slspX0.setMinimum(0.00);
        slspX0.setPattern("0.00");
        slspX0.setTitulo("X0");
        pnlX0Iteracoes.add(slspX0);

        slspIteracoes.setExtendedStep(10);
        slspIteracoes.setMaximum(1000);
        slspIteracoes.setPattern("0000");
        slspIteracoes.setTitulo("Iterações");
        pnlX0Iteracoes.add(slspIteracoes);

        getContentPane().add(pnlX0Iteracoes, java.awt.BorderLayout.SOUTH);

        slspK.addChangeListener(this);
        slspX0.addChangeListener(this);
        slspIteracoes.addChangeListener(this);
		
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void slspKPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_slspKPropertyChange
        this.changeK();
    }//GEN-LAST:event_slspKPropertyChange

    private void changeK() {
        this.parabolaPlot.setK((Double) this.slspK.getValue());
        this.repaintGraph();
    }

    public void stateChanged(ChangeEvent e) {
        this.repaintGraph();
    }

    private void repaintGraph() {
        this.graph.setLogisticIterator(new LogisticIterator((Double) this.slspX0.getValue(), (Double) this.slspK.getValue(), (Integer) this.slspIteracoes.getValue()));
        this.graph.repaint();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Logistic1().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private logisticequation.ui.JXGraph1 graph;
    private javax.swing.JPanel pnlX0Iteracoes;
    private logisticequation.ui.components.SliderSpinner slspIteracoes;
    private logisticequation.ui.components.SliderSpinner slspK;
    private logisticequation.ui.components.SliderSpinner slspX0;
    // End of variables declaration//GEN-END:variables
    private ParabolaPlot parabolaPlot = new ParabolaPlot();
}

class ParabolaPlot extends JXGraph.Plot {

    private double k;

    public void setK(double k) {
        double oldK = k;
        this.k = k;
        super.firePropertyChange("k", oldK, this.k);
    }

    @Override
    public double compute(double x) {
        return k * x * (1 - x);
    }
}

class LinePlot extends JXGraph.Plot {

    @Override
    public double compute(double x) {
        return x;
    }
}

class LogisticIterator implements Iterator<Double> {

    private final Double k;
    private final int maxIteracoes;
    private Double x;
    private int iteracao;

    public LogisticIterator(Double x0, Double k, int maxIteracoes) {
        this.k = k;
        this.maxIteracoes = maxIteracoes;
        this.x = x0;
    }

    private void generateNextX() {
        this.x = this.k * this.x * (1.0 - this.x);
        this.iteracao++;
    }

    public boolean hasNext() {
        return (iteracao < this.maxIteracoes);
    }

    public Double next() {
        Double currentX = this.x;
        this.generateNextX();
        return currentX;
    }

    public void remove() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public int getMaxIteracoes() {
        return maxIteracoes;
    }


}
